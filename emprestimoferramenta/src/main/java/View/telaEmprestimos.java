package View;

import DAO.*;
import Model.Emprestimo;
import java.awt.Color;
import java.awt.Font;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import javax.swing.text.MaskFormatter;

public class telaEmprestimos extends javax.swing.JFrame {

    private EmprestimoDAO emprestimoDAO;

    private AmigoDAO amigoDAO;
    private FerramentaDAO ferramentaDAO;
    private MaskFormatter mascaraData;

    public telaEmprestimos() {

        initComponents();
        this.emprestimoDAO = new EmprestimoDAO();
        this.amigoDAO = new AmigoDAO();
        this.ferramentaDAO = new FerramentaDAO();
        carregaTabela();
    }

    private void initComponents() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void carregaTabela() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnCadastrar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        campoAmigo = new javax.swing.JTextField();
        campoDataPed = new javax.swing.JTextField();
        campoFerramentas = new javax.swing.JTextField();
        campoDataDev = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        fundo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Garamond", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Empréstimos ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 870, 10));

        jLabel1.setFont(new java.awt.Font("Garamond", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID Amigo: ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, -1, 30));

        jLabel3.setFont(new java.awt.Font("Garamond", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Data do pedido: ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        jLabel4.setFont(new java.awt.Font("Garamond", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ID Ferramentas:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 90, -1, -1));

        jLabel5.setFont(new java.awt.Font("Garamond", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Data devolução:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 160, -1, -1));

        btnCadastrar.setBackground(new java.awt.Color(255, 255, 255));
        btnCadastrar.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        btnCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCadastrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 270, -1, -1));

        btnEditar.setBackground(new java.awt.Color(255, 255, 255));
        btnEditar.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 270, -1, -1));

        btnExcluir.setBackground(new java.awt.Color(255, 255, 255));
        btnExcluir.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        btnExcluir.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        getContentPane().add(btnExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 270, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Amigo", "Ferramentas", "Data do pedido", "Dara da devolução", "status"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 810, 160));

        campoAmigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoAmigoActionPerformed(evt);
            }
        });
        getContentPane().add(campoAmigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 96, 190, 20));
        getContentPane().add(campoDataPed, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 164, 190, 20));
        getContentPane().add(campoFerramentas, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 94, 200, 20));

        campoDataDev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoDataDevActionPerformed(evt);
            }
        });
        getContentPane().add(campoDataDev, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 164, 200, 20));

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\victor\\Documents\\NetBeansProjects\\A3 teste\\A3emprestimoferramentas\\emprestimoferramenta\\A3emprestimoferramentas\\emprestimoferramenta\\src\\main\\java\\View\\imagens\\pedindo-emprestado.png")); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon("C:\\Users\\victor\\Documents\\NetBeansProjects\\A3 teste\\A3emprestimoferramentas\\emprestimoferramenta\\A3emprestimoferramentas\\emprestimoferramenta\\src\\main\\java\\View\\imagens\\pedindo-emprestado.png")); // NOI18N
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 0, -1, -1));

        fundo.setIcon(new javax.swing.ImageIcon("C:\\Users\\victor\\Documents\\NetBeansProjects\\A3 teste\\A3emprestimoferramentas\\emprestimoferramenta\\A3emprestimoferramentas\\emprestimoferramenta\\src\\main\\java\\View\\imagens\\fosco.jpg")); // NOI18N
        fundo.setText("jLabel1");
        getContentPane().add(fundo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        // TODO add your handling code here:
 try {
                this.amigoDAO = new AmigoDAO();
                this.ferramentaDAO = new FerramentaDAO();

                int idAmigo = 0;
                int idFerramenta = 0;
                java.sql.Date dataEmprestimo;
                java.sql.Date dataDevolucao = null;

                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                sdf.setLenient(false);

                if (Integer.parseInt(this.campoAmigo.getText()) < 0 || Integer.parseInt(this.campoFerramenta.getText()) < 0) {
                    throw new Mensagens("O ID inserido é inválido.");
                } else {
                    idAmigo = Integer.parseInt(this.campoAmigo.getText());
                    idFerramenta = Integer.parseInt(this.campoFerramenta.getText());
                }

                if (this.campoDataPed.getText().contains("_")) {
                    throw new Mensagens("Insira uma data de empréstimo válida.");
                } else {
                    Date dataPadrao = sdf.parse(this.campoDataPed.getText());
                    long tempo = dataPadrao.getTime();
                    dataEmprestimo = new java.sql.Date(tempo);
                }

                if (!this.campoDataDev.getText().contains("_")) {
                    Date dataPadrao = sdf.parse(this.campoDataDev.getText());
                    long tempo = dataPadrao.getTime();
                    dataDevolucao = new java.sql.Date(tempo);

                    if (dataEmprestimo.getTime() > dataDevolucao.getTime()) {
                        throw new Mensagens("Data de empréstimo se encontra após data de devolução");
                    }
                }

                if (emprestimoDAO.amigoPendente(idAmigo) > 0) { // verifica pendencias do amigo
                    int ferramentaPendente = emprestimoDAO.amigoPendente(idAmigo); // retorna id da ferramenta pendente

                    String nome = amigoDAO.carregaAmigo(idAmigo).getNome();
                    String ferramenta = ferramentaDAO.carregaFerramenta(ferramentaPendente).getNome();

                    int resposta = JOptionPane.showConfirmDialog(rootPane, nome + " ainda não devolveu a(o) " + ferramenta + "\nTem certeza que deseja continuar?", "Confirmação", JOptionPane.YES_NO_OPTION);

                    if (resposta == JOptionPane.NO_OPTION) {
                        throw new Mensagens("Empréstimo cancelado!");
                    }

                } else if (ferramentaDAO.amigoComFerramenta(idFerramenta) > 0) { // verifica disponibilidade da ferramenta
                    int idEmprestimo = ferramentaDAO.amigoComFerramenta(idFerramenta);
                    Emprestimo emprestimoPendente = emprestimoDAO.carregaEmprestimo(idEmprestimo);
                    String nome = emprestimoPendente.getAmigo().getNome();

                    if (dataDevolucao == null || dataDevolucao.compareTo(emprestimoPendente.getDataEmprestimo()) == 1) {
                        throw new Mensagens("Esta ferramenta ainda não foi devolvida por " + nome);
                    }
                } else {
                    idAmigo = Integer.parseInt(this.campoAmigo.getText());
                    idFerramenta = Integer.parseInt(this.campoFerramenta.getText());
                }

                ArrayList<Emprestimo> minhalista = emprestimoDAO.getMinhaLista();

                for (Emprestimo e : minhalista) { // checa se essas informações já estão cadastradas
                    if (e.getAmigo().getId() == idAmigo && e.getFerramenta().getId() == idFerramenta && e.getDataEmprestimo().getTime() == dataEmprestimo.getTime()) {
                        throw new Mensagens("Esse empréstimo já está cadastrado!");
                    }
                }

                Emprestimo objeto = new Emprestimo(amigoDAO.carregaAmigo(idAmigo),
                        ferramentaDAO.carregaFerramenta(idFerramenta),
                        dataEmprestimo,
                        dataDevolucao);

                if (this.emprestimoDAO.InsertEmprestimoBD(objeto)) {

                    this.campoAmigo.setText("");
                    this.campoFerramenta.setText("");
                    this.campoDataPed.setText(null);
                    this.campoDataDev.setText(null);

                    JOptionPane.showMessageDialog(rootPane, "Empréstimo cadastrado com sucesso!");
                }

            } catch (Mensagens | SQLException erro) {
                JOptionPane.showMessageDialog(null, erro.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            } catch (NumberFormatException erro) {
                JOptionPane.showMessageDialog(null, "Favor, informe os IDs necessários para o cadastro.", "Aviso", JOptionPane.WARNING_MESSAGE);
            } catch (ParseException erro) {
                JOptionPane.showMessageDialog(null, "Erro ao converter data inválida.", "Aviso", JOptionPane.WARNING_MESSAGE);
            } finally {
                carregaTabela(); // atualiza a tabela.
            }
        }
                  
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void campoAmigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoAmigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoAmigoActionPerformed

    private void campoDataDevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoDataDevActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoDataDevActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
 try {

            int id = 0;
            int idAmigo = 0;
            int idFerramenta = 0;
            java.sql.Date dataEmprestimo;
            java.sql.Date dataDevolucao = null;

            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            sdf.setLenient(false);

            if (this.tableEmprestimos.getSelectedRow() == -1) {
                throw new Mensagens("Primeiro, selecione um empréstimo para editar.");
            } else {
                id = Integer.parseInt(this.tableEmprestimos.getValueAt(this.tableEmprestimos.getSelectedRow(), 0).toString());
            }

            if (Integer.parseInt(this.campoAmigo.getText()) < 0 || Integer.parseInt(this.campoFerramenta.getText()) < 0) {
                throw new Mensagens("ID deve ser um número positivo.");
            } else {
                idAmigo = Integer.parseInt(this.campoAmigo.getText());
                idFerramenta = Integer.parseInt(this.campoFerramenta.getText());
            }

            if (this.campoDataPed.getText().contains("_")) {
                throw new Mensagens("Insira uma data de empréstimo válida.");
            } else {
                Date dataPadrao = sdf.parse(this.campoDataPed.getText());
                long tempo = dataPadrao.getTime();
                dataEmprestimo = new java.sql.Date(tempo);
            }

            if (!this.campoDataDev.getText().contains("_")) {
                Date dataPadrao = sdf.parse(this.campoDataDev.getText());
                long tempo = dataPadrao.getTime();
                dataDevolucao = new java.sql.Date(tempo);

                if (dataEmprestimo.getTime() > dataDevolucao.getTime()) {
                    throw new Mensagens("Data de empréstimo se encontra após data de devolução.");
                }
            }

            ArrayList<Emprestimo> minhalista = emprestimoDAO.getMinhaLista();

            for (Emprestimo e : minhalista) { // checa se essas informações já estão cadastradas
                if (e.getAmigo().getId() == idAmigo && e.getFerramenta().getId() == idFerramenta && e.getDataEmprestimo().getTime() == dataEmprestimo.getTime() && e.getId() != id) {
                    throw new Mensagens("Esse empréstimo já está cadastrado!");
                }
            }

            if (ferramentaDAO.amigoComFerramenta(idFerramenta) > 0) {
                Emprestimo e = emprestimoDAO.carregaEmprestimo(ferramentaDAO.amigoComFerramenta(idFerramenta));

                if (!(e.getAmigo().getId() == idAmigo && e.getFerramenta().getId() == idFerramenta && e.getDataEmprestimo().getTime() == dataEmprestimo.getTime())) {
                    if (dataDevolucao != null && e.getDataEmprestimo().compareTo(dataDevolucao) == -1) {
                        if (e.getId() != id) {
                            throw new Mensagens("A data de devolução se encontra a frente de um empréstimo pendente desta ferramenta!");
                        }
                        throw new Mensagens("A ferramenta que você está tentando inserir está em um empréstimo pendente!");
                    }
                }

            } else if (emprestimoDAO.amigoPendente(idAmigo) > 0) {
                int ferramentaPendente = emprestimoDAO.amigoPendente(idAmigo);

                String nome = amigoDAO.carregaAmigo(idAmigo).getNome();
                String ferramenta = ferramentaDAO.carregaFerramenta(ferramentaPendente).getNome();

                int resposta = JOptionPane.showConfirmDialog(rootPane, nome + " ainda não devolveu a(o) " + ferramenta + "\nTem certeza que deseja continuar?", "Confirmação", JOptionPane.YES_NO_OPTION);

                if (resposta == JOptionPane.NO_OPTION) {
                    throw new Mensagens("Empréstimo cancelado!");
                }
            }

            Emprestimo objeto = new Emprestimo(id,
                    amigoDAO.carregaAmigo(idAmigo),
                    ferramentaDAO.carregaFerramenta(idFerramenta),
                    dataEmprestimo,
                    dataDevolucao);
            if (this.emprestimoDAO.UpdateEmprestimoBD(objeto)) {

                // limpa os campos
                this.campoAmigo.setText("");
                this.campoFerramenta.setText("");
                this.campoDataPed.setText(null);
                this.campoDataDev.setText(null);
                JOptionPane.showMessageDialog(rootPane, "Empréstimo alterado com sucesso!");

            }

        } catch (Mensagens | SQLException erro) {
            JOptionPane.showMessageDialog(null, erro.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
        } catch (NumberFormatException erro) {
            JOptionPane.showMessageDialog(null, "Favor, informe os IDs necessários para alteração.", "Aviso", JOptionPane.WARNING_MESSAGE);
        } catch (ParseException erro) {
            JOptionPane.showMessageDialog(null, "Erro ao converter data inválida.", "Aviso", JOptionPane.WARNING_MESSAGE);
        } finally {
            carregaTabela();
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
 try {
            int id = 0;
            int idAmigo = 0;

            if (this.tableEmprestimos.getSelectedRow() == -1) {
                throw new Mensagens("Primeiro, selecione um empréstimo para remover");
            } else {
                id = Integer.parseInt(this.tableEmprestimos.getValueAt(this.tableEmprestimos.getSelectedRow(), 0).toString());
                idAmigo = emprestimoDAO.carregaEmprestimo(id).getAmigo().getId();
            }

            int resposta = JOptionPane.showConfirmDialog(rootPane, "Tem certeza que deseja remover este empréstimo?", "Confirmação", JOptionPane.YES_NO_OPTION);

            if (resposta == JOptionPane.YES_OPTION && this.emprestimoDAO.DeleteEmprestimoBD(id)) {
                JOptionPane.showMessageDialog(rootPane, "Empréstimo removido com sucesso!");
            }
        } catch (Mensagens | SQLException erro) {
            JOptionPane.showMessageDialog(null, erro.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
        } finally {
            carregaTabela();
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void carregaTabela() { // listando os objetos emprestimo na tabela

        DefaultTableModel modelo = (DefaultTableModel) this.tableEmprestimos.getModel();
        modelo.setNumRows(0);

        ArrayList<Emprestimo> minhalista = emprestimoDAO.getMinhaLista();

        for (Emprestimo e : minhalista) {
            String stt = e.isStatus() ? "concluído" : "pendente";

            modelo.addRow(new Object[]{
                e.getId(),
                e.getAmigo().getNome(),
                e.getFerramenta().getNome(),
                e.getDataEmprestimo(),
                e.getDataDevolucao(),
                stt
            });
            amigoDAO.UpdateQtdEmprest(e.getAmigo().getId()); // atualiza a qtd de emprestimos de um amigo
        }
    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaEmprestimos().setVisible(true);
            }
        });
    }

    }//GEN-LAST:event_btnExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(telaEmprestimos.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(telaEmprestimos.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(telaEmprestimos.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(telaEmprestimos.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new telaEmprestimos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JTextField campoAmigo;
    private javax.swing.JTextField campoDataDev;
    private javax.swing.JTextField campoDataPed;
    private javax.swing.JTextField campoFerramentas;
    private javax.swing.JLabel fundo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
